import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as cloudfront from 'aws-cdk-lib/aws-cloudfront';
import * as origins from 'aws-cdk-lib/aws-cloudfront-origins';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment';
import * as path from 'path';

/**
 * The `UiStack` sets up the hosting infrastructure for the Martian Bank's frontend application.
 * 
 * This stack provisions an S3 bucket to host the static assets of the React singple page application. 
 * It integrates it with a CloudFront distribution for global content delivery, and ensures API URLs are dynamically injected into the deployed environment.
 * 
 * Note: When deploying a Single-Page Application (SPA) to S3, an additional deployment is required because environment variables (e.g., API Gateway URLs) must be available at synthesis time.
 * This means that dynamically injecting these URLs during stack synthesis is not possible; they must be configured manually in the UI environment in a subsequent deployment.
 * In contrast, services for hosting an UI like AWS Amplify support dynamic injection of environment variables.
 */
export class UiStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // S3 Bucket to store static assets for the React application (using aws-s3 L2 construct)
    const websiteBucket = new s3.Bucket(this, 'WebsiteBucket', {
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
    });

    // CloudFront Distribution to serve the static assets globally (using aws-cloudfront L2 construct)
    const distribution = new cloudfront.Distribution(this, 'WebDistribution', {
      defaultBehavior: {
        origin: origins.S3BucketOrigin.withOriginAccessControl(websiteBucket),
        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS
      },
      defaultRootObject: 'index.html',
      errorResponses: [
        {
          httpStatus: 404,
          responseHttpStatus: 200,
          responsePagePath: '/index.html'
        },
        {
          httpStatus: 403,
          responseHttpStatus: 200, 
          responsePagePath: '/index.html'
        }
      ]
    });

    // Deploy the React application to the S3 bucket (using aws-s3-deployment L2 construct)
    // The `../build` directory must contain the artifacts generated by the `vite build` process.
    new s3deploy.BucketDeployment(this, 'DeployWebsite', {
      sources: [
        // Deploy static build files from the build directory
        s3deploy.Source.asset(path.join(__dirname, '../build')),
      ],
      destinationBucket: websiteBucket,
      distribution
    });

    new cdk.CfnOutput(this, 'URL', { 
      value: `https://${distribution.distributionDomainName}` 
    });
  }
}

// TODO automatic vite build